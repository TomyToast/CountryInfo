{"version":3,"sources":["components/countryItem.js","components/countries.js","components/country.js","components/chart.js","components/region.js","App.js","serviceWorker.js","index.js"],"names":["countryItem","_ref","_ref$country","country","name","capital","population","flag","react_default","a","createElement","className","style","color","src","alt","width","height","number_format_default","value","displayType","thousandSeparator","prefix","Link","to","concat","COUNTRIES_QUERY","gql","_templateObject","Countries","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","react","react_apollo_browser_umd","query","loading","error","data","type","disabled","role","aria-hidden","console","log","countryList","map","Component","COUNTRY_QUERY","country_templateObject","Country","props","match","params","encodeURIComponent","errorPolicy","variables","_data$country","region","nativeName","chart","thing","names","cntr","alpha3Code","populations","i","length","j","push","display","react_easy_chart_lib","colorBars","axes","grid","margin","top","right","bottom","left","region_templateObject","Region","regionName","errors","elements","filter","client","ApolloClient","uri","App","BrowserRouter","textAlign","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e385e8db.chunk.js","sourcesContent":["import React from 'react';\nimport NumberFormat from 'react-number-format';\nimport { Link } from 'react-router-dom';\n\nexport default ({ country: { name, capital, population, flag } }) => {\n  return (\n    <div className='card card-body bg-secondary mb-3'>\n        <div className=\"row\">\n            <div className=\"col-md-3 d-flex justify-content-center align-items-center flex-column\"\n                style={{color:'white'}}>\n                <h4>{ name }</h4>\n                <img src={flag} alt={name} style={{width:200, height:100}}/>\n            </div>\n            <div className=\"col-md-6 card card-body bg-primary\">\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\">The Capital City: { capital }</li>\n                    <li className=\"list-group-item\">\n                        {name} Population:\n                        <NumberFormat\n                            value={ population }\n                            displayType={'text'}\n                            thousandSeparator={\" \"}\n                            prefix={\" \"}\n                        />\n                    </li>\n                </ul>\n            </div>\n            <div className=\"col-md-3 align-self-end\">\n                <Link\n                    to={`/country/${name}`}\n                    className=\"btn btn-primary\">\n                    Country Details\n                </Link>\n            </div>\n        </div>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport CountryItem from './countryItem';\n\nconst COUNTRIES_QUERY = gql`\n query CountriesQuery {\n    countryList {\n        name,\n        capital,\n        population,\n        flag\n    }\n}`;\n\nexport class Countries extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Query query={COUNTRIES_QUERY}>\n            {\n                ({ loading, error, data }) => {\n                    if (loading) return (\n                        <div className=\"d-flex justify-content-center\">\n                            <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                <span \n                                    className=\"spinner-grow spinner-grow-sm\" \n                                    role=\"status\" \n                                    aria-hidden=\"true\">\n                                </span>\n                                Loading...\n                            </button>\n                        </div>\n                    )\n                    if (error) console.log(error);\n\n                    return (\n                        <Fragment>\n                            {\n                                data.countryList.map(country => (\n                                    <CountryItem key={country.name} country={country}/>\n                                ))\n                            }\n                        </Fragment>\n                    );\n                }\n            }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Countries\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst COUNTRY_QUERY = gql`\n    query CountryQuery($name: String!) {\n        country(name: $name) {\n            name,\n            capital,\n            population,\n            flag,\n            region,\n            nativeName,\n            # latlng\n        }\n    }\n`;\n\nexport class Country extends Component {\n  render() {\n      let { name } = this.props.match.params;\n      name = encodeURIComponent(name);\n\n    return (\n      <Fragment>\n        <Query errorPolicy=\"all\" query={COUNTRY_QUERY} variables={{name}}>\n            {\n                ({loading, error, data}) => {\n                    if (loading) return <h4>loading</h4>\n                    if (error) console.log(error);\n\n                    const { name, capital, population, flag, region, nativeName} = data.country\n                    return (\n                        <div className=\"card card-body bg-primary text-white \">\n                            <div className=\"row\">\n                                <div className=\"card bg-primary col-md-12 d-flex justify-content-center align-items-center\">\n                                    <div className=\"row\">\n                                        <h2 className=\"display-4 mt-3\">{ name }</h2>\n                                        <img src={flag} alt={`${name}_flag`} style={{width:100, height:50}}/>\n                                    </div>\n                                    <h3 className=\"mb-3\">Origin name: { nativeName }</h3>\n                                    <h4>Region: {region}</h4>\n                                </div>\n                            </div>\n                            <Link to=\"/\" className=\"btn btn-primary\">Back</Link>\n                        </div>\n                    )\n                }\n            }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Country\n","import React, {Fragment} from 'react';\nimport {BarChart} from 'react-easy-chart';\n\nexport default (props) => {\n  let names = props.country.map((cntr) => cntr.alpha3Code);\n  let populations = props.country.map((cntr) => cntr.population);\n\n  let data = [],\n    thing;\n\n  for(let i = 0; i < populations.length; i++){\n    thing = {};\n    for(let j = 0; j < names.length; j++){\n      thing['x'] = names[i];\n      thing['y'] = populations[i];\n    }\n    data.push(thing);\n  }\n\n\n  return (\n    <div\n      className=' bg-white d-flex justify-content-center align-items-center flex-column mb-5'\n      style={{display: 'inline-block'}}\n    >\n      <h4>Region Population</h4>\n      <BarChart\n        colorBars\n        axes\n        grid\n        width = {1400}\n        height = {400}\n        data = {data}\n        margin = {{top: 5, right: 0, bottom: 100, left: 0}}\n      />\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Chart from './chart';\nimport CountryItem from './countryItem';\n\nconst COUNTRIES_QUERY = gql`\n query CountriesQuery {\n    countryList {\n        name,\n        capital,\n        population,\n        flag,\n        region,\n        alpha3Code\n    }\n}`;\n\nexport class Region extends Component {\n    render(){\n        let { regionName } = this.props.match.params;\n        regionName = encodeURIComponent(regionName);\n        return (\n            <Fragment>\n                <Query query={COUNTRIES_QUERY} >\n                    {\n                        ({loading, errors, data}) => {\n                            if (loading) return <h4>Loading...</h4>\n                            if (errors) console.log(errors);\n\n                                const elements = data.countryList.filter(country => (country.region === `${regionName}`));\n\n                                return(\n                                    <Fragment>\n                                        <Chart country={elements}/>\n                                        {\n                                            elements.map(country => (\n                                                <CountryItem key={country.name} country={country}/>\n                                            ))\n                                        }\n                                    </Fragment>\n                                )\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Region;","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport Countries from './components/countries';\nimport Country from './components/country';\nimport Region from './components/region';\nimport './App.css';\n\nconst client = new ApolloClient({\n  // uri: 'http://localhost:5000/graphql'\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n          <div className=\"container\">\n            <nav className=\"navbar navbar-dark bg-dark my-3\">\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  <h1\n                  style={{textAlign: 'center', color: 'white'}}>\n                    Countries of the World\n                  </h1>\n                </Link>\n                <Link to={'/Africa'}  className=\"btn btn-primary\">Africa</Link>\n                <Link to={'/Asia'} className=\"btn btn-primary\">Asia</Link>\n                <Link to={'/Americas'} className=\"btn btn-primary\">Americas</Link>\n                <Link to={'/Europe'} className=\"btn btn-primary\">Europe</Link>\n                <Link to={'/Oceania'} className=\"btn btn-primary\">Oceania</Link>\n            </nav>\n            <Route exact path=\"/\" component={ Countries } />\n            <Route exact path=\"/country/:name\" component={ Country } />\n            <Route path=\"/:regionName\" exact component={Region} />\n          </div>\n        </Router>\n      </ApolloProvider>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}